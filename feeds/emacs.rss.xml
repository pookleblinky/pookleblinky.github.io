<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Mistake Not: Posts tagged 'emacs'</title>
  <description>Mistake Not: Posts tagged 'emacs'</description>
  <link>http://pookleblinky.github.io/tags/emacs.html</link>
  <lastBuildDate>Sat, 03 Jun 2017 23:56:51 UT</lastBuildDate>
  <pubDate>Sat, 03 Jun 2017 23:56:51 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>org mode and yakshaving</title>
   <link>http://pookleblinky.github.io/2017/06/org-mode-and-yakshaving.html?utm_source=emacs&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-pookleblinky-github-io:-2017-06-org-mode-and-yakshaving-html</guid>
   <pubDate>Sat, 03 Jun 2017 23:56:51 UT</pubDate>
   <author>Pookleblinky</author>
   <description>
&lt;p&gt;I tweaked my language-of-the day script. There is now a major language of the day (racket, elixir, haskell) and a minor language of the day (cl, chicken, clojure, erlang, ocaml). Each day gets a major language and a minor language; the major gets more emphasis.&lt;/p&gt;

&lt;p&gt;How much more can vary depending on mood, but this way not only does something get done in each language each day, but the three I am most interested in get more emphasis each day.&lt;/p&gt;

&lt;p&gt;It seems like a nice setup. I&amp;rsquo;ll have to play around with it more to see where the annoyances are. The other day, for instance, was a haskell day but I got damned little accomplished due to trying to get stack to work properly.&lt;/p&gt;

&lt;p&gt;The yakshave in question: no matter how I changed $TMPDIR and $STACK_ROOT and such, stack kept trying to download its local ghc into ~/.stack on my internal drive then cartoonishly fail at attempting to stuff it into my limited (I&amp;rsquo;m on crouton) tmpfs instead of using a tmp folder on an external drive with 2TB of space. Symlinks, according to github issues tracking, apparently work fine &lt;em&gt;after&lt;/em&gt; stack setup has done its thing, but that wasn&amp;rsquo;t the problem I was having. I eventually concluded that it&amp;rsquo;d require serious yakshaving with executability of external drives and such, and gave up for now. In the end, I got little actual haskell done due to spending so much time trying to get its environment working.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s my global org todo keywords:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq org-todo-keywords
	'((sequence "TODO(t)" "STARTED(s)"
		"DEFERRED(p)" "NEXT(n)"
		"YAKSHAVE(y)"
		"|" "DONE(d)" "CANCELLED(c)")))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have a YAKSHAVE org status that I can apply to tasks. I can C-c c a yakshave note (&amp;ldquo;figure out how to get stack to actually use $TMPDIR&amp;rdquo; etc) and keep doing what I was doing. I can clock in and out of it as I work on something, and see how much time was spent actually doing a task versus getting things to work. At some point I&amp;rsquo;ll log this ratio of task to yakshave by language, over time, etc.&lt;/p&gt;

&lt;p&gt;Deferred/Next refer to tasks for a specific language that I&amp;rsquo;ll pick up again the next time its language-of-the-day rolls around.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;m doing is banging out a bunch of todos after language-of-the-day. C-c a t 1 r and I can see all of them. I can start one, C-c C-t it to started, and then make subtasks for it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;; Enforce dependencies
(setq org-enforce-todo-dependencies t)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes a todo depend on sub-tasks. You can&amp;rsquo;t switch a task to DONE until every TODO in it is done. Yakshaves aren&amp;rsquo;t subtasks, and thus survive after the task is done as a reminder. Afterwards, I can switch the yakshave to a TODO, clock in, and start messing with it.&lt;/p&gt;

&lt;p&gt;While writing this I popped out a yakshave task to see how to convert org source blocks to scribble code blocks. Github pages renders org and md, but I don&amp;rsquo;t know if I can tell it &amp;ldquo;this is a markdown file with org syntax you should also follow.&amp;rdquo; Hm, I wonder if frog can be made to deal with org files. In keeping with my goal of minimizing yakshaving, I decided to just indent the above code snippets into generic markdown blocks and play with it later.&lt;/p&gt;

&lt;p&gt;I then made a note to figure out how to display clock minutes as pomodoro units just by dividing them by 25. I don&amp;rsquo;t really use pomodoro (I prefer to measure effort in cigarettes. A full gentoo stage one install is 1 pack. Getting Frog up and running: 3 cigarettes.) But, seeing things as 25 minute chunks is just more useful than seeing the raw amount of time spent. Doing the same thing later and seeing the effort drop is more impressive when you can see whole pomodoro units drop off rather than &amp;ldquo;oh it took 20 minutes less on each of these parts.&amp;rdquo;&lt;/p&gt;</description></item>
  <item>
   <title>org mode and language study</title>
   <link>http://pookleblinky.github.io/2017/05/org-mode-and-language-study.html?utm_source=emacs&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-pookleblinky-github-io:-2017-05-org-mode-and-language-study-html</guid>
   <pubDate>Wed, 31 May 2017 09:39:05 UT</pubDate>
   <author>Pookleblinky</author>
   <description>
&lt;p&gt;I made a shell script that plops out a random programming language from the list of ones I&amp;rsquo;m playing with. I called it language-of-the-day.&lt;/p&gt;

&lt;p&gt;In the morning, I add an entry to orgfile.org that drops the output of that script into today&amp;rsquo;s node and evals it. I then know what language to focus on that day.&lt;/p&gt;

&lt;p&gt;I then C-c c and start adding todos for that language. Do foo, look up bar, try out baz, study source of quux, etc. C-c a t lets me see all these todos, and I can start working on them.&lt;/p&gt;

&lt;p&gt;I can divide a todo into separate todo steps, set a time estimate for each, and see how long I expect the task to take. It&amp;rsquo;s possible to then compare the estimate with the reality, and see how laughable the former is. It&amp;rsquo;s possible to then look into the subtasks and see which ones were the most inaccurate. I can set a todo note to study whatever was causing that step to take so long.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s language is Racket. I only have 3 todos: some exercism problems, studying the Racket style guide, and writing yasnippet/ultisnip templates specifically for Racket. The latter is gonna take a while, as I don&amp;rsquo;t feel at all like writing a snippet I will never use. I&amp;rsquo;d rather write code, note (C-c c n) when a snippet would come in handy, and keep working on it. Later, I can look at those notes and see which snippets would actually come in handy. I can also, without interrupting what I&amp;rsquo;m doing, make a note about inefficient editing habits. &amp;ldquo;find a better way to do blah&amp;rdquo; etc.&lt;/p&gt;

&lt;p&gt;This workflow helps keep me from bouncing around too much, playing with trying the same thing in another language or editor or falling down the rabbit hole of yakshaving. I&amp;rsquo;m focusing on foolang, doing bar and quux, and can tell you exactly how long it took me to figure out how to frobulate the wibble. Afterward I can look the notes, spin them off into separate projects, remind myself that I really wanted to try out x in another language, etc.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not a polished, highly automated set up for 2 reasons: I don&amp;rsquo;t like magic, and that way lays endless yakshaving. This way has enough rough edges that resisting the urge to yakshave them away is a good form of exposure therapy.&lt;/p&gt;</description></item>
  <item>
   <title>orgmode</title>
   <link>http://pookleblinky.github.io/2017/05/orgmode.html?utm_source=emacs&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-pookleblinky-github-io:-2017-05-orgmode-html</guid>
   <pubDate>Mon, 29 May 2017 17:13:40 UT</pubDate>
   <author>Pookleblinky</author>
   <description>
&lt;p&gt;I&amp;rsquo;m spending some time getting org-mode configured the way I want. I&amp;rsquo;m trying to keep things as simple as possible, given how much yakshave potential there is in org mode. I have only a few files in ~/org:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;orgfile&lt;/li&gt;
 &lt;li&gt;blog.org&lt;/li&gt;
 &lt;li&gt;code.org&lt;/li&gt;
 &lt;li&gt;refile.org&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Orgfile.org, which is the default general agenda file. It&amp;rsquo;s structured like this:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;datetree&lt;/li&gt;
 &lt;li&gt;links&lt;/li&gt;
 &lt;li&gt;notes&lt;/li&gt;
 &lt;li&gt;tasks&lt;/li&gt;
 &lt;li&gt;orgstuff&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;My blog.org is just a datetree.&lt;/p&gt;

&lt;p&gt;Code.org is tough to figure out how to structure it. I initially thought of organizing by language, but I don&amp;rsquo;t like how that lacks telos. It encourages dicking around with no goal, just bouncing from thing to thing. I could organize by project, but that similarly lacks focus if there are multiple projects to bounce around in. I settled on just a datetree and tags. A datetree encourages a daily log of what I intend to do, what I actually did, and where I am going. I can just filter by tags and date until this becomes insufficient and I need to split off a project, in which case I&amp;rsquo;d rather add it to code.org instead of making a new orgfile. Again, I want to try as hard as possible to discourage dicking around bouncing from one thing to another without a goal.&lt;/p&gt;</description></item></channel></rss>