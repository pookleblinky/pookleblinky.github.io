<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Mistake Not: Posts tagged 'coding'</title>
 <link rel="self" href="http://pookleblinky.github.io/feeds/coding.atom.xml" />
 <link href="http://pookleblinky.github.io/tags/coding.html" />
 <id>urn:http-pookleblinky-github-io:-tags-coding-html</id>
 <updated>2018-02-04T09:36:58Z</updated>
 <entry>
  <title type="text">Lifescripts: Stochastic routines</title>
  <link rel="alternate" href="http://pookleblinky.github.io/2018/02/lifescripts-stochastic-routines.html?utm_source=coding&amp;utm_medium=Atom" />
  <id>urn:http-pookleblinky-github-io:-2018-02-lifescripts-stochastic-routines-html</id>
  <published>2018-02-04T09:36:58Z</published>
  <updated>2018-02-04T09:36:58Z</updated>
  <author>
   <name>Pookleblinky</name></author>
  <content type="html">
&lt;p&gt;Since November I&amp;rsquo;ve been doing a form of intermittent fasting I created based on coinflips, that I call coinfasting. Every morning flip a coin. Heads, you eat, tails you fast. The expected value of heads over 7 days is 3.5, so it&amp;rsquo;s identical in effect to a scheduled alternate day fast.&lt;/p&gt;

&lt;p&gt;(As an aside: since August I&amp;rsquo;ve lost about 22kg, or about 24% of my bodyweight.)&lt;/p&gt;

&lt;p&gt;The introduction of randomness makes things interesting: you can&amp;rsquo;t just binge on heads days, because you may get a bunch in a row. And you can&amp;rsquo;t restrict too much on fast days, because you may get a bunch of fast days in a row. This makes it easier to dial in on the right amount of calories, and lets the meals be a bit less absurd than on a normal ADF.&lt;/p&gt;

&lt;p&gt;After doing this a while, I love it. It feels fun and sustainable, and is easily modifiable. When I hit maintenance, I can such as switch heads to TDEE+15%, tails to TDEE&amp;ndash;15% easily. The only actual daily habit that needs to be engrained is one cointoss.&lt;/p&gt;

&lt;p&gt;I decided to embrace more flipism.&lt;/p&gt;

&lt;p&gt;Each morning I do 20 minutes of cycling. On heads days I add another 30 minute afternoon cycling session. This gives a baseline of 140 minutes, which is the minimum recommended dose of cardio, and averages over time to another 105 minutes for a total of 245 minutes a week. Maximum: 350 minutes a week. This is a good amount of cardio, as the maximum effective dose of cardio is about 450 minutes a week &lt;a href="https://well.blogs.nytimes.com/2015/04/15/the-right-dose-of-exercise-for-a-longer-life/"&gt;The Right Dose of Exercise for a Longer Life&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s both calories and LISS out of the way, with one coinflip.&lt;/p&gt;

&lt;p&gt;I then based my kettlebell on dice. After flipping the coin, roll 2d6 and multiply by a number to get the number of swings that day. I chose a multiplier of 10. On average, 70 swings a day, maximum 120. This is because any more swings right now would bite into my deficit too much. Later, I can toggle the amount based on the coinflip: heads 25, tails 10. This&amp;rsquo;d bring me to a maximum of 300 swings a day, and an average of 210.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s what I&amp;rsquo;d been doing for a while. Some days I&amp;rsquo;d physically flip a coin and roll dice, other days I&amp;rsquo;d just ask my phone to do so.&lt;/p&gt;

&lt;p&gt;I decided to automate this.&lt;/p&gt;

&lt;p&gt;I created a git repo called Lifescripts, and began making small racket programs to at first simply do what I&amp;rsquo;m already doing.&lt;/p&gt;

&lt;p&gt;Now I can simultaneously flip and roll for the day with one command.&lt;/p&gt;

&lt;p&gt;The git repo is here: &lt;a href="https://github.com/pookleblinky/lifescripts"&gt;pookleblinky/lifescripts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I then added a script to decide whether to engage in argument, a script to decide whether to cuss. One to decide the music of the day, one to decide which topic to boost for the day. A script to decide whether to refactor or write new code. One to assign a random small task like doing kettlebell swings or clean something.&lt;/p&gt;</content></entry>
 <entry>
  <title type="text">Git koans</title>
  <link rel="alternate" href="http://pookleblinky.github.io/2017/05/git-koans.html?utm_source=coding&amp;utm_medium=Atom" />
  <id>urn:http-pookleblinky-github-io:-2017-05-git-koans-html</id>
  <published>2017-05-21T22:59:32Z</published>
  <updated>2017-05-21T22:59:32Z</updated>
  <author>
   <name>Pookleblinky</name></author>
  <content type="html">
&lt;p&gt;Git Koans don&amp;rsquo;t really exist. I can&amp;rsquo;t be arsed to make it, though. There are some anecdotes called Git Koans, but as far as I can tell there is nothing similar to Clojure/Ruby Koans where you get hands-on experience fixing things incrementally, from tiny mistakes all the way up the ladder.&lt;/p&gt;

&lt;p&gt;Basically: &amp;ldquo;Here&amp;rsquo;s broken shit. Fix it.&amp;rdquo; &amp;ldquo;Yay, you fixed it. Here&amp;rsquo;s more broken shit. Fix it.&amp;rdquo; Turn on continuous integration and use post-commit hooks as the koan runner. Eventually, you fix all the problems in the broken repo.&lt;/p&gt;

&lt;p&gt;It actually wouldn&amp;rsquo;t be very hard. You can pretty much use any kind of make system to build a repo then fuck it up per order. The result would be hands-on experience fixing fuckups in git, from small to huge. Hell: a joker shell script that takes all the commands used to evolve a repo, and randomly inserts typos and wrong commands to fuck it up (Maybe just swap the entered command with one which is often accidentally typed instead). &amp;ldquo;Here&amp;rsquo;s a fork of Foo that&amp;rsquo;s been utterly fucked. Walk through its history and unfuck it.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You could also do local/remote fuckups pretty easily too. Have a shell script that purposely messes up upstream/downstream relations, purposely screws up a merge, etc. Nightmare mode: multiple remotes are created, each randomly screwed up to simulate others trying, unsuccessfully, to fix their own messed up repos.&lt;/p&gt;

&lt;p&gt;As far as I can tell, this doesn&amp;rsquo;t exist. The only time you&amp;rsquo;re ever fixing a fuckup is in actual goddamn repos during your job. The &lt;em&gt;only&lt;/em&gt; time you will ever unfuck an arbitrarily broken repo is when your ass depends on it.&lt;/p&gt;

&lt;p&gt;This means that for most people, git is a &lt;a href="https://people.csail.mit.edu/sperezde/oopsla16.pdf"&gt;cargo cult&lt;/a&gt;. You don&amp;rsquo;t know how to unfuck things, you&amp;rsquo;re doing shit like cp -R repo repo.old. Imagine if you wrote code this way: the &lt;em&gt;only&lt;/em&gt; time you ever fix bugs is in production code. The only time you ever fix a bug is when your ass is on the line. You&amp;rsquo;d also do cargo cult bullshit. You&amp;rsquo;d be that happy asshole sloppily commenting out lines of code to see what&amp;rsquo;s wrong. In $Lang the Hard Way style tutorials, it&amp;rsquo;s heavily emphasized that you should break stuff in order to learn what happens, and how to fix it when you do inevitably do it by accident. Yet, I would put money on the bet that the vast majority of git users have never purposely broken a repo in order to learn how to fix it. How many purposely messed up a commit or 3 in order to get hands-on experience with git reflog? How many intentionally committed to the wrong branch so they could learn how to stash pop. How many purposely introduced a painful merge conflict in order to learn the right (painless) way to resolve it? Purposely broke the build in order to learn how to use bisect?&lt;/p&gt;

&lt;p&gt;In code, it&amp;rsquo;s unthinkable that you would have no experience of fixing bugs outside of &amp;ldquo;we need this fixed yesterday&amp;rdquo; situations. Yet with git, that&amp;rsquo;s the case. No experience, at all, of unfucking repos that you don&amp;rsquo;t depend on for rent or whatever. The average git user has no idea how to fix mistakes they make, and every mistake they do have to fix is only ever on a real repo.&lt;/p&gt;

&lt;p&gt;Look at &lt;a href="http://ohshitgit.com/"&gt;Oh Shit Git&lt;/a&gt;. It lists very common mistakes, in plain English, and explains how to fix them. I guarantee that the vast majority of git users have never &lt;em&gt;purposely&lt;/em&gt; made those mistakes in order to see how to fix them. For many, the first time they have to fix a mistake, that mistake is new to them and they end up on ohshitgit or stackoverflow typing commands that may as well be mystic incantations.&lt;/p&gt;</content></entry></feed>